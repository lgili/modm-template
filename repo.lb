#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2018, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

import re
from distutils.version import StrictVersion
from pathlib import Path

import lbuild
min_lbuild_version = "1.11.8"
if StrictVersion(getattr(lbuild, "__version__", "0.1.0")) < StrictVersion(min_lbuild_version):
    print("The mcal repository requires at least lbuild v{}, please upgrade!\n"
          "    pip3 install -U lbuild".format(min_lbuild_version))
    exit(1)

# =============================================================================
def init(repo):
    repo.name = "mcal"
    repo.description = FileReader("README.md")

    repo.add_ignore_patterns("*/*.lb", "*/board.xml")

    # Add the board configuration files as their module name aliases
    for module in Path(repopath("mcal/board")).glob("*/module.lb"):
        module_text = module.read_text()
        name = re.search(r"\.name += +\".*?:board:(.*?)\"", module_text).group(1)
        if (module.parent / "module.md").exists():
            description = FileReader(str(module.parent / "module.md"))
        else:
            description = re.search(r'description += +(""".*?"""|".*?")',
                                    module_text, flags=re.S|re.M)
            description = description.group(1).strip('"\\') if description else None
        versions = re.search(r"#+ +[Rr]evisions? += +\[(.*)\]", module_text)
        versions = versions.group(1).split(",") if versions is not None else [""]
        config = {v.strip(): (module.parent / "board.xml") for v in versions}
        repo.add_configuration(Configuration(name, description, config, versions[0].strip()))


    repo.add_option(
        EnumerationOption(
            name="dev_board",
            description="Which development board to be used",
            enumeration=["board-a", "board-b"]))

def prepare(repo, options):
    repo.add_modules_recursive("mcal")
    # repo.add_modules_recursive("modm")

def build(env):
	env.collect("modm:build:path.include", "mcal/src/")
